"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[965],{72404:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a MultiLootPlan. The optional parameters `seed` and `step` can\\nbe used for consistent deterministic results.\\n\\n:::caution Seed is required to use step\\nThe `step` parameter determines how many times the random number generator\\nshould be called on construction. Combined with seed, this allows you to\\nmake deterministic results. This can be desired for cases where you don\'t\\nwant re-rolling (e.g. starting a new session to try for a better result).\\n\\nNo matter how many times you run the code below either in the Studio\\ncommand bar or the server console in a live session, the results will\\nalways be the exact same: 97, 95, 17, 7, 97. Step is designed to make\\nsure that when using a seed, the random number generator will always be\\nadvanced in such a way that the results become inescapable.\\n\\n```lua\\nfor i = 1, 5 do\\n\\tlocal rng = Random.new(1)\\n\\tlocal results = {}\\n\\n\\tfor i = 1, 5 do\\n\\t\\ttable.insert(results, rng:NextInteger(1, 100))\\n\\tend\\n\\n\\tprint(table.concat(results, \\", \\"))\\nend\\n```\\n\\nTherefore, equivalently, with MultiLootPlan:\\n\\n```lua\\nlocal gemBatch = {\\n\\t[\\"Diamond\\"] = 0.5,\\n\\t[\\"Jade\\"] = 3,\\n\\t[\\"Phosphophyllite\\"] = 100\\n}\\n\\nlocal planA = LootPlan.Multi.new(1, 3)\\nlocal planB = LootPlan.Multi.new(1, 3)\\n\\nplanA:BatchAdd(gemBatch)\\nplanB:BatchAdd(gemBatch)\\n\\nlocal phosA = planA:GetRandomLoot(25)[\\"Phosphophyllite\\"]\\nlocal phosB = planB:GetRandomLoot(25)[\\"Phosphophyllite\\"]\\n\\nprint(phosA == phosB) --\x3e true\\n```\\n:::","params":[{"name":"seed","desc":"","lua_type":"number?"},{"name":"step","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"MultiLootPlan"}],"function_type":"static","source":{"line":108,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"GetChance","desc":"Gets the percentage chance of a loot.\\n\\n:::danger Required for paid randomisation compliance\\nIt is imperative that you implement this method to comply with the\\n[Paid Random Virtual Items Policy](https://create.roblox.com/docs/production/monetization/randomized-virtual-items-policy)\\nwhich governs Roblox policy around random item generators that can be paid\\nfor either directly (with Robux) or indirectly (with an in-experience\\ncurrency that can be purchased with Robux).\\n\\nPolicy dictates that you must declare the actual numerical odds to the\\nplayer before they commit to their purchase. Using a LootPlan class puts\\nit as the source of truth for the numerical reward chance, so likewise\\nthe numbers returned from this method should be shown to players so they\\nknow exactly what they may receive.","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":168,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"Add","desc":"Adds a piece of loot to the loot table.\\n\\n:::danger tostring required for non-strings\\nIf for example you use numbers to id your loot, you will need to call\\ntostring on the number. Add will error at runtime if a non-string is\\nsubmitted.\\n:::","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"chance","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":187,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"BatchAdd","desc":"Adds multiple pieces of loot to the loot table. This is sugar for calling\\n[Add](/api/MultiLootPlan#Add) on every piece of loot you want to\\nadd to the loot table.","params":[{"name":"batch","desc":"","lua_type":"NumericalBatch"}],"returns":[],"function_type":"method","source":{"line":205,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"Remove","desc":"Removes a piece of loot from the loot table.","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":214,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"BatchRemove","desc":"Remove multiple pieces of loot from the loot table. This is sugar for\\ncalling [Remove](/api/MultiLootPlan#Remove) on every piece of\\nloot you want to remove from the loot table.","params":[{"name":"batch","desc":"","lua_type":"{string}"}],"returns":[],"function_type":"method","source":{"line":223,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"ChangeChance","desc":"Changes the chance of a loot.","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"chance","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":232,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"BatchChangeChance","desc":"Batch version of [ChangeChance](/api/MultiLootPlan#ChangeChance).\\nSugar for individual calls on each piece of loot.","params":[{"name":"batch","desc":"","lua_type":"NumericalBatch"}],"returns":[],"function_type":"method","source":{"line":248,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"IncreaseChance","desc":"Adds to the chance of an existing loot. This is sugar for passing a number\\nadded to the result of [GetChance](/api/MultiLootPlan#GetChance) to\\n[ChangeChance](/api/MultiLootPlan#ChangeChance).","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"chance","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":259,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"BatchIncreaseChance","desc":"Batch version of\\n[IncreaseChance](/api/MultiLootPlan#IncreaseChance). Sugar for\\nindividual calls on each piece of loot.","params":[{"name":"batch","desc":"","lua_type":"NumericalBatch"}],"returns":[],"function_type":"method","source":{"line":278,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"DecreaseChance","desc":"Subtracts to the chance of an existing loot. This is sugar for passing a\\nnumber added to the result of\\n[GetChance](/api/MultiLootPlan#GetChance) to\\n[ChangeChance](/api/MultiLootPlan#ChangeChance).","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"chance","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":290,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"BatchDecreaseChance","desc":"Batch version of\\n[DecreaseChance](/api/MultiLootPlan#DecreaseChance). Sugar for\\nindividual calls on each piece of loot.","params":[{"name":"batch","desc":"","lua_type":"NumericalBatch"}],"returns":[],"function_type":"method","source":{"line":309,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"Roll","desc":"Rolls for pieces of loot from the loot table. Can optionally be provided\\nwith `iterations` which determines how many rolls should be performed and\\n`luck` which modifies the winning randomisation range for each piece\\nof loot rolled. Both `iterations` and `luck` default to 1.\\n\\n:::note \\"Nothing\\" is not required\\nUnlike SingleLootPlan, you do not need to explicitly add a \\"Nothing\\"\\nloot to a MultiLootPlan table. If a randomisation falls outside the\\nrange of any of the items in the loot table, it is counted as a missed\\nreward (as such, the number of items in the finalised table may be less\\nthan the number of declared iterations).\\n:::\\n\\n```lua\\nlocal results = plan:Roll(50)\\n\\nfor name, quantity in results do\\n\\t-- Handle the results\\nend\\n```","params":[{"name":"iterations","desc":"","lua_type":"number?"},{"name":"luck","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"MultiResults"}],"function_type":"method","source":{"line":339,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"Destroy","desc":"Cleans up the MultiLootPlan object and locks the table from changes.\\n\\n:::tip Automatically cleans up without strong references\\nMultiLootPlan objects are pure data. As long as you don\'t have any strong\\nreferences to a MultiLootPlan object or its contents, you can safely\\ndiscard them without calling Destroy and they will be cleaned up by the\\ngarbage collector.\\n:::","params":[],"returns":[],"function_type":"method","source":{"line":381,"path":"src/lootplan/MultiLootPlan.lua"}}],"properties":[],"types":[{"name":"MultiLoot","desc":"Loot information.","lua_type":"{Name: string, Chance: number}","source":{"line":45,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"MultiResults","desc":"Roll results table.","lua_type":"{[string]: number}","source":{"line":51,"path":"src/lootplan/MultiLootPlan.lua"}},{"name":"MultiLootPlan","desc":"MultiLootPlan object.\\n\\n:::danger Not recommended to directly access properties\\nNone of the properties of a MultiLootPlan object are considered private\\naccess or read only but developers are encouraged to use object methods\\ninstead for any reading and writing purposes over directly accessing them.\\n\\nIn the case of reading, a method may have additional steps involved before\\nit returns a value. In the case of writing, unexpected behaviour may be\\nproduced by changing properties on your own. This is especially the case\\nwith changing the random number generator after constructing an object:\\nresults may be tampered if advancing generation or reassigning the\\ngenerator.\\n:::","fields":[{"name":"Randomiser","lua_type":"Random","desc":"Random number generator specific to this MultiLootPlan."},{"name":"Loot","lua_type":"{{[string]: MultiLoot}}","desc":"Loot dictionary (used in modifying loot and randomisation)."}],"source":{"line":129,"path":"src/lootplan/MultiLootPlan.lua"}}],"name":"MultiLootPlan","desc":"MultiLootPlan is designed for cases where you want to generate multiple\\npieces of loot in one roll. A common example is clear rewards in a\\ndungeon crawling experience or from an open world chest.\\n\\nUnlike SingleLootPlan which uses a weight-based approach, MultiLootPlan\\nworks purely in direct percentages. You supply the percentage chance of\\nan item being included in a roll as well as how many rolls should be\\nperformed. Each roll may yield more than one item.\\n\\nThe random number generator is called for a winning threshold for each\\nitem in a roll that the item is then checked against. Say for example you\\nhave these items and their percentages (assume a luck multiplier of 1):\\n\\n- Diamond: 0.01 (0.0001)\\n- Gold: 2 (0.02)\\n- Iron: 10 (0.10)\\n- Stone: 100 (1)\\n\\nThe random number generates a number between 0 and 1, so the percentages\\nthat you give in the loot table are lowered to a value between 0 and 1\\nby turning the percentage into a decimal (dividing by 100).\\n\\nGiven this list, there is an 100% chance for Stone to be included in\\nevery roll (1 will always be higher or equal to any number produced\\nby Random:NextNumber). The random number generator is then called three\\nmore times for the remaining items in the list to produce thresholds that\\neach of the items must exceed to be counted as a winning result.","source":{"line":35,"path":"src/lootplan/MultiLootPlan.lua"}}')}}]);