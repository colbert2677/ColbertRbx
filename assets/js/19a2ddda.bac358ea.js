"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[371],{67716:e=>{e.exports=JSON.parse('{"functions":[{"name":"Replicate","desc":"Queue a replication change by setting an attribute on a given instance.\\n\\nThe queued replication change will effectively provide a snapshot of\\nthe model at the time of the call. Best practice is to parent your\\ninstances to a container that replicates to clients first before\\ncalling Replicate so the attribute change can be queued after\\nthe replication of the instance\'s descendants.\\n\\n\\t","params":[{"name":"object","desc":"","lua_type":"Instance"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":70,"path":"src/replicationutils/init.lua"}},{"name":"WaitForLoaded","desc":"Set up a Promise that resolves when the client receives the replication\\nchange set by the server.\\n\\n:::caution Must use Replicate on the server first\\nWaitForLoaded only works for instances that the server has first called\\nReplicate on. The Promise may not resolve up to the maximum timeout if\\nusing WaitForLoaded without first calling Replicate.\\n:::\\n\\n:::info nil arguments will default\\nAny argument not provided will fall back to the default value. This is\\nmostly only relevant for being able to use the third argument to\\ncontrol issue handling per WaitForLoaded call.\\n\\n```lua\\nReplicationUtils:WaitForLoaded(FoobarFolder, nil, false):catch(function (exception)\\n\\t-- Write your own catch here\\nend)\\n```\\n:::\\n\\n\\t","params":[{"name":"object","desc":"","lua_type":"Instance"},{"name":"timeout","desc":"","lua_type":"number"},{"name":"handleExceptions","desc":"","lua_type":"boolean"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"method","realm":["Client"],"source":{"line":152,"path":"src/replicationutils/init.lua"}}],"properties":[{"name":"DefaultTimeout","desc":"Provides the base timeout value for Promises created by\\n[WaitForLoaded](/api/ReplicationUtils#WaitForLoaded). Defaults to `10`.\\n\\nThis value can be overridden per call of WaitForLoaded with the second\\nargument.\\n\\n:::tip Recommended to use a low number\\nAlthough DefaultTimeout can be any value, it\'s recommended to use a\\nlow number or keep the default value of `10`. Chained Promises or\\nsubsequent code (in the case of using await, awaitStatus or expect)\\nmay delay up to this value before rejecting if incoming replication\\nis heavily delayed.\\n:::\\n\\n:::danger Property value not protected\\nReplicationUtils only enforces the parameter type; it does not perform\\nany special checks against what you may assign to this property. It is\\nyour responsibility to use a reasonable value.\\n:::\\n\\n\\t","lua_type":"number","realm":["Client"],"source":{"line":104,"path":"src/replicationutils/init.lua"}},{"name":"HandleExceptions","desc":"Determines if ReplicationUtils should catch rejected Promises itself,\\nremoving the burden from the developer to write error handlers for each\\n[WaitForLoaded](/api/ReplicationUtils#WaitForLoaded) call. Defaults to\\n`true`.\\n\\nThis value can be overridden per call of WaitForLoaded with the third\\nargument.\\n\\n:::danger Property value not protected\\nReplicationUtils only enforces the parameter type; it does not perform\\nany special checks against what you may assign to this property. It is\\nyour responsibility to use a reasonable value.\\n:::\\n\\n\\t","lua_type":"boolean","realm":["Client"],"source":{"line":125,"path":"src/replicationutils/init.lua"}}],"types":[],"name":"ReplicationUtils","desc":"Utility to help with replication assurances. Modified from tyridge77\'s\\n[ReplicationUtils](https://devforum.roblox.com/t/replicationutils/2072172).\\n\\nQueue a replication change by setting an attribute on an object which the\\nclient can wait to receive. The server also additionally sets a global\\ncounter to allow some uniqueness between checks.\\n\\nThis module is best used after a target instance enters a container that\\nreplicates to the client. The attribute set will effectively snapshot the\\ninstance at the time of the queued change as the attribute replication\\nwill arrive later.\\n\\nReplicationUtils uses [Promise](https://eryn.io/roblox-lua-promise/) by\\nevaera in [WaitForLoaded](/api/ReplicationUtils#WaitForLoaded). You can\\nget the best use out of this module with familiarity to Promises.\\n\\n```lua\\n-- Server:\\nFrameworkRemotes.Parent = ReplicatedStorage\\nReplicationUtils:Replicate(FrameworkRemotes)\\n\\n-- Client:\\nReplicationUtils:WaitForLoaded(FrameworkRemotes):andThen(function ()\\n\\tBuildObjects(FrameworkRemotes)\\nend):catch(function (exception)\\n\\t-- You can write your own error handler\\nend)\\n\\n-- You can customise how the internals work on the client:\\nReplicationUtils.DefaultTimeout = 60\\nReplicationUtils.HandleExceptions = true\\n```\\n\\n:::note ReplicationUtils uses attributes\\nReplicationUtils uses the attribute `ColbertRbx_ReplicationCounter` for its\\noperation. The prefix helps prevent namespace collisions with any attributes\\nyou might set for instances. For developers forking the module that want to\\nchange the internal attribute, it is the `COUNTER_ATTRIBUTE` constant.\\n:::","source":{"line":51,"path":"src/replicationutils/init.lua"}}')}}]);