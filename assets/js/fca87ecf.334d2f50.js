"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[220],{93761:e=>{e.exports=JSON.parse('{"functions":[{"name":"Table","desc":":::caution Yielding function\\nThis function will yield due to its AdvanceToNextPageAsync call in a\\nwhile loop.\\n:::\\n\\nGenerate an equivalent representation of the Pages instance as a table. This\\nwill get rid of the overhead of the Pages instance and API, presenting the\\ncontent as a table.\\n\\n```lua\\nlocal friends = Promise.resolve(PagesUtil.Table(Players:GetFriendsAsync(6809102)))\\nprint(friends[#friends][1]) -- First element of the last page\\n```","params":[{"name":"pages","desc":"","lua_type":"Pages"}],"returns":[{"desc":"","lua_type":"{{any}}\\n"}],"function_type":"static","yields":true,"source":{"line":27,"path":"src/pagesutil/init.lua"}},{"name":"Elements","desc":":::caution Yielding function\\nThis function will yield due to its AdvanceToNextPageAsync call in a\\nwhile loop.\\n:::\\n\\nGenerate a one-dimensional array containing all elements of all pages of a\\ngiven Pages instance.\\n\\n```lua\\nlocal friends = Promise.resolve(PagesUtil.Elements(Players:GetFriendsAsync(6809102)))\\nprint(friends[#friends]) -- Last overall element\\n```","params":[{"name":"pages","desc":"","lua_type":"Pages"}],"returns":[{"desc":"","lua_type":"{any}\\n"}],"function_type":"static","yields":true,"source":{"line":59,"path":"src/pagesutil/init.lua"}},{"name":"Iterate","desc":"Return a coroutine for a stateful iterator, allowing looping through page\\ncontent much like a table. Iterate converts the Pages instance into a\\ntable via [Table](/api/PagesUtil#Table) under the hood and advances pages\\nautomatically.\\n\\nThe two variables returned are the element and the page number in that\\norder. All other rules of iteration apply.\\n\\nThis is an abstraction for hand-iterating the results of\\n[Table](/api/PagesUtil#Table) where you would normally write a loop per\\ndimension.\\n\\n:::caution Use with a for loop\\nIterate is intended to be placed as the iterator of a `for` loop. Although it\\nis possible to use Iterate outside of a loop, it is generally not recommended\\nchiefly on account of readability and consistency.\\n:::\\n\\n:::tip Niche use case\\nShould only be used if knowing the page number is important. Most cases for\\niterating pages should be done by first breaking down the pages with\\n[Elements](/api/PagesUtil#Elements) and then iterating through it with ipairs\\nor generalised iteration.\\n:::\\n\\n```lua\\n-- Usage:\\nfor element, pageNo in PagesUtil.Iterate(foobarPages) do\\n\\tsomething(element, pageNo)\\nend\\n\\n-- Equivalent without Iterate:\\nfor pageNo, content in ipairs(PagesUtil.Table(foobarPages)) do\\n\\tfor _, element in ipairs(content) do\\n\\t\\tsomething(element, pageNo)\\n\\tend\\nend\\n```","params":[{"name":"pages","desc":"","lua_type":"Pages"}],"returns":[{"desc":"","lua_type":"coroutine"}],"function_type":"static","source":{"line":119,"path":"src/pagesutil/init.lua"}}],"properties":[],"types":[],"name":"PagesUtil","desc":"Simple utility for working with Roblox pages instances.","source":{"line":8,"path":"src/pagesutil/init.lua"}}')}}]);